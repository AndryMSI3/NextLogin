import dotenv from 'dotenv'
dotenv.config();

import express from "express";
import cors from "cors";
import sql = require("./app/models/db");
import mysql, { RowDataPacket } from "mysql2"; // Importation de mysql2
import multer from "multer";
import { validationResult } from "express-validator";
import bcrypt from "bcrypt";
import { Request, Response } from "express";
import { exec } from 'child_process';
import path from 'path';

/**
 *  Ce fichier est le point d'entr√©e de l'API
 *  c'est i√ßi que le frontend communique avec le backend.
 *  
 *  Le projet est divis√© en 3 parties:
 *  - Les routes d√©finissent les chemins permettant d‚Äôacc√©der aux contr√¥leurs ainsi que
 *  la m√©thode utilis√©e pour y acc√©der. 
 *  - Les contr√¥leurs filtrent les donn√©es envoy√©es par la requ√™te. Si les donn√©es 
 *  envoy√©es dans la requ√™te sont valides, le contr√¥leur fait appel au mod√®le avec les 
 *  donn√©es pass√©es dans la requ√™te. Si les donn√©es sont invalides ou si le mod√®le 
 *  renvoie une erreur, le contr√¥leur renverra une erreur.
 *  - Les mod√®les se chargent de l'interaction avec la base de donn√©es. Un mod√®le
 *   effectue les requ√™tes SQL sur la base de donn√©es.
 * 
 *   Cependant, en dehors de ce sch√©ma, il y a la fonction "createDefaultAdmin" qui 
 *   cr√©er un utilisateur par d√©faut au cas o√π il n'y a pas d'utilisateur.
 *   Il doit √™tre enclench√© lors du d√©marrage du serveur.
 * 
 *   M√™me chose pour "restoreDB" √ßel√† permet de cr√©er une base de donn√©es si la base
 *   de donn√©es n'existe pas encore.
 * 
 *   Aussi, le chemin qui permet de cr√©er les utilisateur est tr√®s compliqu√© √† mettre
 *   en place dans le sch√©ma pr√©sent√© √ßi-dessus √† cause de la biblioth√®que multer
 *   qui permet d'uploader les images.
 */

const app = express();
const upload = multer({ dest: '../client/public/images' });

const corsOptions = {
    origin: "http://localhost:3000"
};

// Importation des routes API

import userRoutes from "./app/routes/user.routes";

const SALT_ROUNDS = 10;

// Middleware
app.use(cors(corsOptions));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

const connection = mysql.createConnection({
    host: 'localhost',
    user: process.env.DB_USER,        // Utilisateur MySQL
    password: process.env.DB_PASSWORD // Mot de passe de l'utilisateur
});
  
// V√©rifier si la base de donn√©es existe et la cr√©er si n√©cessaire
const checkAndCreateDatabase = () => {
    const databaseName = 'nextLogin';  // Le nom de la base de donn√©es √† v√©rifier
    const backupFilePath = path.join(__dirname, 'backup.sql'); // Chemin du fichier de backup
    
    // V√©rifier si la base de donn√©es existe d√©j√†
    sql.query(`SHOW DATABASES LIKE ?`,[databaseName],(err, rows: any) => {
      if (err) {
        console.error('‚ùå Erreur lors de la v√©rification de la base de donn√©es:', err);
        return;
      }
  
      if (rows.length > 0) {
        console.log(`‚úÖ La base de donn√©es "${databaseName}" existe d√©j√†.`);
      } else {
        console.log(`‚ùå La base de donn√©es "${databaseName}" n'existe pas.`);
        // Cr√©er la base de donn√©es si elle n'existe pas
        connection.query(`CREATE DATABASE ${databaseName}`, (err) => {
          if (err) {
            console.error('‚ùå Erreur lors de la cr√©ation de la base de donn√©es:', err);
            return;
          }
          console.log(`üõ† Base de donn√©es "${databaseName}" cr√©√©e.`);
          // Une fois la base de donn√©es cr√©√©e, se reconnecter √† la nouvelle base
          connection.changeUser({ database: databaseName }, (err) => {
            if (err) {
              console.error('‚ùå Erreur lors de la reconnexion √† la base de donn√©es:', err);
            } else {
              console.log(`‚úÖ Connexion r√©ussie √† la base de donn√©es "${databaseName}".`);
              // Importer le backup dans la base de donn√©es
              importBackup();
            }
          });
        });
      }
    });
  
    // Fonction pour importer le fichier de backup
    const importBackup = () => {
      exec(`mysql --defaults-extra-file=${path.join(__dirname, '.my.cnf')} ${databaseName} < ${backupFilePath}`, (error, stdout, stderr) => {
        if (error) {
          console.error(`‚ùå Erreur lors de l'importation du backup : ${error.message}`);
          return;
        }
        if (stderr) {
          console.error(`‚ùå Erreur lors de l'importation du backup : ${stderr}`);
          return;
        }
        console.log(`‚úÖ Backup ${databaseName} import√© avec succ√®s.`);
        
      });
    };
  };
  
  // Lancer la v√©rification et cr√©ation de la base de donn√©es
  checkAndCreateDatabase();

/**
 * C'est le point d'entr√©e qui permet de cr√©er un nouvel utilisateur.
*/

app.post(
    "/api/users/create", 
    upload.single('image'), 
    async (req: Request, res: Response): Promise<void> => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        console.log("errors: ", errors);
        res.status(400).json({ errors: errors.array() });
        return;
    }

    if (!req.file) {
        res.status(400).json({ error: "Image is required" });
        return;
    }
    const userPicture = req.file.filename;
    const userName = req.body.userName;
    const password = req.body.passWord;
    const privilege = req.body.privilege;
    bcrypt.genSalt(SALT_ROUNDS, (err, salt) => {
        if (err) {
            console.log("error:", err);
            res.status(500).send({ error: "Error while generating salt" });
            return;
        }
        bcrypt.hash(password, salt, (err, hashedPassword) => {
            if (err) {
                console.log("error:", err);
                res.status(500).send({ error: "Error while hashing password" });
                return;
            }
            sql.query("INSERT INTO utilisateur(user_name, password, privilege, user_picture) VALUES (?, ?, ?, ?)",
                [userName, hashedPassword, privilege, userPicture], (err: Error | null, result: any) => {
                    if (err) {
                        console.log("error:", err); 
                        res.status(500).send({ error: "Internal Server Error" });
                        return;
                    }
                    res.send({ userPicture, userName, hashedPassword, privilege });
                });
        });
    });
});

// Routes API
app.use("/users", userRoutes);

const PORT = process.env.PORT || 8080;

app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}.`);
}); 